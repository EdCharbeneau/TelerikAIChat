@page "/"
@inject IOpenAiService service


<div>
    <TelerikAIPrompt @ref="@AIPromptRef"
                     @bind-Prompt="@Prompt"
                     Commands="@PromptCommands"
                     OnPromptRequest="@HandlePromptRequest"
                     Width="500px">
    </TelerikAIPrompt>
    <TelerikLoader Visible="isLoading"></TelerikLoader>
</div>

@code {
    public bool isLoading = false;
    public string Prompt { get; set; }
    public TelerikAIPrompt AIPromptRef { get; set; }
    public List<AIPromptCommandDescriptor> PromptCommands { get; set; } = new List<AIPromptCommandDescriptor>()
    {
        new AIPromptCommandDescriptor() { Title = "Rewrite in personal voice", Icon = SvgIcon.Pencil },
        new AIPromptCommandDescriptor() { Title = "Rewrite in brand voice", Icon = SvgIcon.Pencil },
        new AIPromptCommandDescriptor() { Title = "Generate document headline", Icon = SvgIcon.FileHeader },
        new AIPromptCommandDescriptor() { Title = "Generate section headline", Icon = SvgIcon.FileFooter },
    };

    public void SetPromptSuggestion(string suggestion)
    {
        Prompt = suggestion;
    }

    public List<string> PromptSuggestions { get; set; } = new List<string>()
    {
        "Act as a marketing specialist and content writer and write a compelling [type of text] that speaks directly to my [ideal customer persona] and encourages them to take [desired action] on my [website/product].",
        "I'm looking for a [type of text] that will convince [ideal customer persona] to sign up for my [program/subscription] by explaining the value it brings and the benefits they'll receive.",
        "Write a Twitter thread idea that will both go viral and attract high-quality leads for my [product/service] with a strong call-to-action and compelling visuals."
    };

    public async Task HandlePromptRequest(AIPromptPromptRequestEventArgs args)
    {
        string result = await service.MakeAiRequest(args.Prompt);
        args.Output = result;
    }

    public void HandleCommandExecute(AIPromptCommandDescriptor command)
    {
        AIPromptRef.AddOutput("This represents the generated output from the AI in response to the submitted request.", command.Title, null, null, command.Id, true);
    }
}

<style>
    .prompt-suggestion-item {
        cursor: pointer;
        border: 1px solid #eaeaea;
        border-radius:24px;
        margin: 3px;
        padding: 0.5rem;
        transition: transform 0.2s;
        box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
    }

    .prompt-suggestion-item:hover {
        transform: scale(1.05)
    }
</style>

<style>
    .box {
        margin: 4.5em 7.5em;
        padding: 3em;
        background-color: rgba(20,53,80,0.038);
        border: 1px solid rgba(20,53,80,0.05);
    }

    .demo-section {
        margin: 0 auto;
        padding: 3em;
        border: 1px solid rgba(20,53,80,0.14);
        box-shadow: 0 1px 2px 1px rgba(0,0,0,.08), 0 3px 6px rgba(0,0,0,.08);
    }

    .auto {
        max-width: max-content;
    }

    .demo-section:not(.wide):not(.auto),
    .box:not(.wide):not(.auto) {
        max-width: 500px;
    }

    .box:after,
    .demo-section:after {
        content: ";
        display: block;
        clear: both;
        height: 0;
    }

    .box {
        margin: 4.5em auto;
    }

    .box:first-child {
        margin-top: 0;
    }

    .center {
        text-align: center;
    }

    .demo-section.editor {
        max-width: 100%;
        border: none;
    }
    .demo-alert {
        font: normal 18px "Metric";
        border-radius: 2px;
        margin: 20px auto 40px auto;
        padding: 20px;
        border-left: 4px solid;
    }

    .demo-alert-success {
        border-left-color: rgb(55,180,0);
        background: rgba(55,180,0, 0.1);
    }

    .demo-alert-info {
        border-left-color: rgb(83,146,228);
        background: rgba(83,146,228, 0.1);
    }

    .demo-alert-error {
        border-left-color: rgb(243, 23, 0);
        background: rgba(243, 23, 0, 0.1);
    }

    .demo-alert-warning {
        border-left-color: rgb(255, 192, 0);
        background: rgba(255, 192, 0, 0.1);
    }
</style>